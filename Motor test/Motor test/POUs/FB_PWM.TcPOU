<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_PWM" Id="{97f2005f-88d7-4913-9e3e-876430c870ed}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PWM
VAR_INPUT
	dutyCycle: LREAL;
END_VAR
VAR_OUTPUT
	state:BOOL;
END_VAR
VAR
	pulseWidth:LREAL := 0;
	hertz: LREAL;
	currentTimeStep:LREAL;
	FB_GETCURTASKINDEX:GETCURTASKINDEX;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// a simple PWM function
FB_GETCURTASKINDEX();
Hertz:= 1 / (UDINT_TO_LREAL(_TaskInfo[FB_GETCURTASKINDEX.index].CycleTime)/ 10_000_000); // function takes the cycle time of the system to calculate the hertz
currentTimeStep:= currentTimeStep+1;// go to the next step


IF currentTimeStep <= pulseWidth  AND currentTimeStep <= hertz THEN // time on
	state:=TRUE;
ELSIF currentTimeStep >= hertz THEN // when finished
	state:=FALSE;
	pulseWidth:= hertz * dutyCycle; // the value is onverted to in to get rid of the values after the dot
	currentTimeStep:=0;
ELSE // wehn pwm is off
	state := FALSE;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="FB_PWM">
      <LineId Id="48" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="38" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>