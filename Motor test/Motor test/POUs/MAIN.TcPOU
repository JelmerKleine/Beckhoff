<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{3ce5e4ac-bfb0-49c4-b2f9-09c5e5f1024f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// programma variabelen
	State: INT ;
	sPrgNameSegment: STRING(255) := 'beckhoff.nc';
	nInterpreterState: UDINT;
	moveAbs1: BOOL := FALSE;
	moveAbs2: BOOL := FALSE;
	executeExtruderMovement :BOOL := TRUE;
	resetExtruder : BOOL :=FALSE;
	intreperterState : UDINT;
	// programma functies
	fbPower: FB_PowerChannel;
	fbGetCurrentState: FB_CheckCurrentState;
	
	// Extruder variables
	ExtruderValue: LREAL; 
	ExtruderSpeed : LREAL;
	//Extruder functies
	moveExtruderAbsolute1: MC_MoveAbsolute;
	moveExtruderAbsolute2: MC_MoveAbsolute;
	Extruder: AXIS_REF;
	setExtruder:MC_SetPosition;
	fbGetPrinterParameters: FB_GetPrinterParameters;
	
	// XYZ variabelens
	HomingSensorX AT %I*: BOOL;
	HomingSensorY AT %I*: BOOL;
	HomingSensorZ AT %I*: BOOL;
	Xoffset: LREAL := 0;
	Yoffset: LREAL := 0;
	Zoffset: LREAL := 0.38;
	// XYZ functies
	Xjog: MC_Jog;
	Yjog: MC_Jog;
	moveZAbsolute: MC_MoveAbsolute;
	moveXAbsolute: MC_MoveAbsolute;
	moveYAbsolute: MC_MoveAbsolute;
	Zhome: MC_Home;
	setXY1:MC_SetPosition;
	setXY2:MC_SetPosition;
	Xaxis: AXIS_REF;
	Yaxis: AXIS_REF;
	Zaxis: AXIS_REF;
	XY_1: AXIS_REF;
	XY_2: AXIS_REF;
	
	//H-bot variabelen
	in_stKinToPlc AT %I*  : NCTOPLC_NCICHANNEL_REF;
	ExecuteKinConfig: BOOL := TRUE;
	//H-bot variabelen
	stAxesConfig: ST_KinAxes;
	fbConfigKinGroup: FB_KinConfigGroup;
	
	// NCI variabelen
	in_stNciToPlc AT %I*: NCTOPLC_NCICHANNEL_REF;
	out_stPlcToNci AT %Q*: PLCTONC_NCICHANNEL_REF;
	//NCI functies
	fbBuildGroup: CfgBuildExt3DGroup;
	//fbReconfigAxis: CfgReconfigAxis;
	fbExecuteGcode: FB_ExecuteGcode;
	fbLoadGCode: ItpLoadProgEx;
	fbStartGCode: ItpStartStopEx;
	fbConfirmHsk: ItpConfirmHsk;
	
	// hot bed and hot end variables
	hotendResitance AT %I*  : INT := 1;
	hotbedResitance AT %I*  : INT := 1;
	hotendHeater AT %Q*  : BOOL;
	hotbedHeater AT %Q*  : BOOL;
	hotendFan1 AT %Q*  : BOOL;
	hotendFan2 AT %Q*  : BOOL;
	HeatersOn: BOOL := FALSE;
	// hot bed and hot end functies
	fbHotEndHeatingControl: Heater_control;
	fbHotBedHeatingControl: Heater_control;
	
	// Verschillende temperturen met hun weerstanden voor de steinhart equation
	// temperaturen die dichter bij de use case zitten vebeter de precisie van de gemeten temperatuur
	hotEndCalibrationValues  : ARRAY [1..6] OF LREAL := [200 ,552.99 ,210 ,456.11, 220, 378.95];
	hotBedCalibrationValues : ARRAY [1..6] OF LREAL := [50 ,35262  ,60 ,24136  ,70 ,16841  ]; 
	
	// interface parameters
	bEnable: BOOL := FALSE;
	homeAxi: BOOL := FALSE;
	executeGcode: BOOL := FALSE;
	
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Zet alle motoren aan wanneer enabled doordat de enable knop wordt ingedrukt.
fbPower( 
	bEnable:=bEnable, 
	fOvr:= 100.0, 
	stX:=Xaxis, 
	stY:=Yaxis, 
	stZ:=Zaxis,
	stXY_1:= XY_1,
	stXY_2:= XY_2,
	stExt:= Extruder,
	stPlcToNci:=out_stPlcToNci , 
	bAllAxesReady=> );
	
// voor het bewegen van de extruder tijdens de code 
// met de Extruder value uit de g-code en snelheid opbasis van de printkop
moveExtruderAbsolute1(Axis := Extruder, execute := moveAbs1 , Position := extruderValue ,Velocity := extruderSpeed ,buffermode := MC_Aborting );
moveExtruderAbsolute2(Axis := Extruder, execute := moveAbs2 , Position := extruderValue ,Velocity := extruderSpeed ,buffermode := MC_Aborting );		
	
IF HeatersOn THEN // Een boolena die bepaald de hot end ne hot bed worden verwarmd
	fbHotEndHeatingControl(terminalResistance := hotendResitance,desiredTemp := 210,calibrationValues := hotEndCalibrationValues, maxTemp := 220); // pd controlller die een pwm signaal output
	hotendHeater := fbHotEndHeatingControl.PWM_out;
	fbHotBedHeatingControl(terminalResistance := hotbedResitance,desiredTemp := 60,calibrationValues := hotBedCalibrationValues, maxTemp := 70); // pd controlller die een pwm signaal output
	hotbedHeater := fbHotBedHeatingControl.PWM_out;
ELSE 
	hotendHeater := FALSE;
	hotbedHeater := FALSE;
END_IF 

	
CASE State OF
	0: // init parameters
	
	
	hotendFan1 := TRUE;
	hotendFan2 := TRUE;
	moveAbs1 := FALSE;
	moveAbs2 := FALSE;
	
	ExecuteKinConfig:=TRUE;
	IF fbPower.bAllAxesReady THEN // wanneer de motoren aan staan
		State := 10; 
	END_IF
	
	
	
	10: // cofigureren van de h-bot
	HeatersOn:= TRUE;
	// voeg motoren toe aan stAxisConfig, de vologrde maakt uit voor de uiteindelijk xy as richting.
	stAxesConfig.nAxisIdsAcs[1] := XY_2.NcToPlc.AxisId;
	stAxesConfig.nAxisIdsAcs[2] := XY_1.NcToPlc.AxisId;
	stAxesConfig.nAxisIdsMcs[1] := Xaxis.NcToPlc.AxisId;
	stAxesConfig.nAxisIdsMcs[2] := Yaxis.NcToPlc.AxisId;
	
	fbConfigKinGroup( // voeg de xy core motoren toe tot de kinematische groep van de h-bot
    bExecute       := ExecuteKinConfig ,
    bCartesianMode := TRUE ,
    stAxesList     := stAxesConfig,
    stKinRefIn     := in_stKinToPlc );
	
	// wanneer de fbConfigKinGroup klaar is zonder error, 
	// gaat de functie naar de volgende state wanneer de home knop wordt ingedrukt
	IF NOT fbConfigKinGroup.bBusy THEN 
		IF NOT fbConfigKinGroup.bError THEN
			ExecuteKinConfig:=FALSE;
			fbConfigKinGroup(
			bExecute       := ExecuteKinConfig ,
			stAxesList     := stAxesConfig,
			stKinRefIn     := in_stKinToPlc );
			IF homeAxi THEN 
				State:=30;
			END_IF
		END_IF
	// of wanneer er al een kinematische groep is geconfigureerd 
	// kan het programma ook naar de volgende state wanneer de home knop wordt ingedrukt
	ELSIF F_KinGetChnOperationState(in_stKinToPlc) = KinStatus_Ready THEN
		ExecuteKinConfig:=FALSE;
			fbConfigKinGroup(
			bExecute       := ExecuteKinConfig ,
			stAxesList     := stAxesConfig,
			stKinRefIn     := in_stKinToPlc );
			IF homeAxi THEN
				State:=20;
			END_IF
	END_IF
	
	
	
	20: // jog de x axis tot de eind switch wordt geraakt
	Xjog(Axis:= Xaxis,JogBackwards:= TRUE , Deceleration:= 1500);
	
	IF NOT HomingSensorX THEN
		Xjog(Axis:= Xaxis,JogBackwards:= FALSE,);
		State:=21;
	END_IF
	
	
	
	21: // jog de y axis tot de eind switch wordt geraakt
	Yjog(Axis:= Yaxis,JogBackwards:= TRUE , Deceleration:= 1500);
	IF NOT HomingSensorY THEN
		Yjog(Axis:= Yaxis,JogBackwards:= FALSE);	
		State:=22;
	END_IF
	
	
	
	22: // Zet cartesian mode uit zodat de positie van de xy motoren op 0 geet kan worden om te homen
	ExecuteKinConfig:=TRUE;
	fbConfigKinGroup( 
    bExecute       := ExecuteKinConfig,
    bCartesianMode := FALSE ,
    stAxesList     := stAxesConfig,
    stKinRefIn     := in_stKinToPlc );
	
	
	IF NOT fbConfigKinGroup.bBusy THEN
		SetXY1(execute:= TRUE ,axis:= XY_1 ,position:= Xoffset);
		SetXY2(execute:= TRUE ,axis:= XY_2 ,position:= Yoffset);
		IF NOT fbConfigKinGroup.bError THEN
			ExecuteKinConfig:=FALSE;
			fbConfigKinGroup(
			bExecute       := ExecuteKinConfig ,
			stAxesList     := stAxesConfig,
			stKinRefIn     := in_stKinToPlc );
			State:=23;
		END_IF
	END_IF
	
	
	
	23: // home de z axis
	Zhome(axis := Zaxis,execute := TRUE,BCalibrationCam := NOT HomingSensorZ,Position := Zoffset);
	IF Zhome.Done THEN
		ExecuteKinConfig:=TRUE;
		State:=24;
	END_IF
	
	
	
	24:
	
	fbConfigKinGroup( // zet de kinematische groep weer op cartesian mode om hem weer te kunnnen bewegen.
    bExecute       := ExecuteKinConfig,
    bCartesianMode := TRUE ,
    stAxesList     := stAxesConfig,
    stKinRefIn     := in_stKinToPlc );
	
	IF NOT fbConfigKinGroup.bBusy THEN
		IF NOT fbConfigKinGroup.bError THEN
			State:= 25;
		END_IF
	END_IF
	
	
	25: // beweegt de z-as alvast omlaag.
	moveZAbsolute(axis:= Zaxis, Execute:= TRUE, Position:= 1, velocity:=1);
	IF moveZAbsolute.Done THEN
		moveZAbsolute(axis:= Zaxis, Execute:= FALSE);
		state:= 26;
	END_IF
	
	
	26: // zet de positie van de extruder naar 0.
	setExtruder(execute:= TRUE ,axis:= Extruder ,position:= 0);
	IF setExtruder.Done AND fbHotEndHeatingControl.temperatureSensor >= 210 AND fbHotBedHeatingControl.temperatureSensor >= 55 THEN
		state:= 30;
	END_IF
	
	
	
	30: // het configureren van de NCI met de x,y en z as.
	fbBuildGroup(
		bExecute:=TRUE,
		nGroupId:=ItpGetGroupId(sNciToPlc:=in_stNciToPlc),
		nXAxisId:=XAxis.NcToPlc.AxisId,
		nYAxisId:=YAxis.NcToPlc.AxisId,
		nZAxisId:=ZAxis.NcToPlc.AxisId,
		tTimeOut:=T#2S );
		
	IF NOT fbBuildGroup.bBusy THEN
		fbBuildGroup( bExecute:=FALSE );
		IF NOT fbBuildGroup.bErr THEN 
				State	:= 31;
		END_IF
	END_IF
	
	31:
	IF executeGcode THEN // wannner de input execute wordt gegeven in de visualizatie.
		state:= 40;
	END_IF
	
	40: // g-code wordt gestart
	fbExecuteGcode(execute:= TRUE ,sPrgName:= sPrgNameSegment ,in_stNciToPlc:= in_stNciToPlc, reset:= FALSE);
	
	IF fbExecuteGcode.done THEN
		fbExecuteGcode(execute:= FALSE, reset:= TRUE);
		state:= 41;
	END_IF
	
	
	
	41: //tijdens g-code 
	
	//vraag de verschillende paramers voor het printen op.
	fbGetPrinterParameters(in_stNciToPlc:= in_stNciToPlc, extruderValue=> extruderValue,extruderSpeed=> extruderSpeed);
	// bepaal de huidige state van het programma.
	fbGetCurrentState(in_stNciToPlc:= in_stNciToPlc, nextState:= 42, state=> State);
	// beweeg de extruder
	moveAbs1 := TRUE;
	moveAbs2 := FALSE;
	
	42: //tijdens g-code 
	
	//vraag de verschillende paramers voor het printen op.
	fbGetPrinterParameters(in_stNciToPlc:= in_stNciToPlc, extruderValue=> extruderValue,extruderSpeed=> extruderSpeed);
	// bepaal de huidige state van het programma.
	fbGetCurrentState(in_stNciToPlc:= in_stNciToPlc, nextState:= 41, state=> State);
	// beweeg de extruder
	moveAbs1 := FALSE;
	moveAbs2 := TRUE;
	43: // voer het M01 commando uit de g-code uit.
	//stop met het tuivoer van de absolute commandos voor de extruder.
	moveAbs1 := FALSE;
	moveAbs2 := FALSE;
	// zet de extrduer positie op 0
	setExtruder(execute:= TRUE ,axis:= Extruder ,position:= 0);
	IF setExtruder.Done THEN
		// stuur een bericht naar NCI dat de M commando is uitgevoerd.
		fbConfirmHsk(sNciToPlc := in_stNciToPlc,
						  sPlcToNci:= out_stPlcToNci,
						  bExecute:= TRUE);
		setExtruder(execute:= FALSE ,axis:= Extruder);
		state:= 41;
	END_IF
	fbConfirmHsk(sNciToPlc := in_stNciToPlc,
						  sPlcToNci:= out_stPlcToNci,
						  bExecute:= FALSE);
						  
	50: // print is klaar
	// beweeg de printkop naar een positie waar deze niet in de weg zit.
	moveXAbsolute(axis:= Xaxis, Execute:= TRUE, Position:= 10, velocity:=25);
	moveYAbsolute(axis:= Yaxis, Execute:= TRUE, Position:= 10, velocity:=25);
	IF moveXAbsolute.Done AND moveYAbsolute.Done THEN
		moveXAbsolute(axis:= Xaxis, Execute:= FALSE);
		moveYAbsolute(axis:= Yaxis, Execute:= FALSE);
		state:= 51;
	END_IF
	51: // stop de temperatuur regeling
	HeatersOn:= FALSE;
	
	
END_CASE
	
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="4373" Count="0" />
      <LineId Id="3220" Count="10" />
      <LineId Id="4367" Count="1" />
      <LineId Id="4374" Count="0" />
      <LineId Id="3232" Count="2" />
      <LineId Id="4056" Count="0" />
      <LineId Id="4065" Count="0" />
      <LineId Id="4172" Count="0" />
      <LineId Id="4067" Count="1" />
      <LineId Id="4072" Count="2" />
      <LineId Id="3844" Count="0" />
      <LineId Id="4280" Count="0" />
      <LineId Id="3243" Count="15" />
      <LineId Id="3481" Count="0" />
      <LineId Id="3259" Count="1" />
      <LineId Id="4077" Count="0" />
      <LineId Id="3261" Count="10" />
      <LineId Id="4369" Count="0" />
      <LineId Id="4372" Count="0" />
      <LineId Id="3272" Count="10" />
      <LineId Id="4370" Count="1" />
      <LineId Id="3943" Count="0" />
      <LineId Id="3945" Count="3" />
      <LineId Id="3944" Count="0" />
      <LineId Id="3950" Count="1" />
      <LineId Id="3949" Count="0" />
      <LineId Id="3283" Count="2" />
      <LineId Id="3480" Count="0" />
      <LineId Id="3286" Count="8" />
      <LineId Id="3479" Count="0" />
      <LineId Id="3295" Count="7" />
      <LineId Id="3478" Count="0" />
      <LineId Id="3303" Count="22" />
      <LineId Id="3477" Count="0" />
      <LineId Id="3326" Count="7" />
      <LineId Id="3476" Count="0" />
      <LineId Id="3334" Count="13" />
      <LineId Id="3624" Count="0" />
      <LineId Id="3348" Count="0" />
      <LineId Id="3623" Count="0" />
      <LineId Id="3627" Count="1" />
      <LineId Id="3630" Count="0" />
      <LineId Id="3629" Count="0" />
      <LineId Id="3475" Count="0" />
      <LineId Id="3625" Count="0" />
      <LineId Id="3349" Count="6" />
      <LineId Id="3474" Count="0" />
      <LineId Id="3356" Count="10" />
      <LineId Id="3368" Count="5" />
      <LineId Id="3848" Count="2" />
      <LineId Id="3473" Count="0" />
      <LineId Id="3374" Count="8" />
      <LineId Id="3471" Count="0" />
      <LineId Id="3383" Count="0" />
      <LineId Id="4465" Count="0" />
      <LineId Id="4467" Count="0" />
      <LineId Id="3384" Count="0" />
      <LineId Id="4468" Count="0" />
      <LineId Id="4185" Count="0" />
      <LineId Id="4188" Count="0" />
      <LineId Id="3412" Count="0" />
      <LineId Id="4187" Count="0" />
      <LineId Id="4470" Count="0" />
      <LineId Id="3413" Count="0" />
      <LineId Id="4471" Count="1" />
      <LineId Id="3421" Count="0" />
      <LineId Id="4473" Count="0" />
      <LineId Id="3437" Count="1" />
      <LineId Id="3472" Count="0" />
      <LineId Id="4186" Count="0" />
      <LineId Id="3440" Count="0" />
      <LineId Id="4474" Count="0" />
      <LineId Id="3441" Count="1" />
      <LineId Id="3446" Count="2" />
      <LineId Id="4476" Count="0" />
      <LineId Id="3449" Count="5" />
      <LineId Id="4190" Count="3" />
      <LineId Id="3456" Count="0" />
      <LineId Id="4477" Count="0" />
      <LineId Id="3954" Count="2" />
      <LineId Id="3958" Count="0" />
      <LineId Id="3960" Count="1" />
      <LineId Id="3959" Count="0" />
      <LineId Id="3957" Count="0" />
      <LineId Id="3457" Count="0" />
      <LineId Id="3459" Count="3" />
      <LineId Id="1252" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>