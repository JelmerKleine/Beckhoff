<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{3ce5e4ac-bfb0-49c4-b2f9-09c5e5f1024f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	
	fbPower: FB_PowerChannel;
	
	//fbfanControl: Fan_control;
	fbHotEndHeatingControl: Heater_control;
	fbGetHotEndTemperature : FB_GetTemperature;
	fbHotBedHeatingControl: Heater_control;
	fbGetHotBedTemperature : FB_GetTemperature;
	
	fbExecuteGcode: FB_ExecuteGcode;
	fbBuildGroup: CfgBuildExt3DGroup;
	fbReconfigAxis: CfgReconfigAxis;
	fbAddAxis: CfgAddAxisToGroup;
	fbLoadGCode: ItpLoadProgEx;
	fbStartGCode: ItpStartStopEx;
	fbConfigKinGroup: FB_KinConfigGroup;
    stAxesConfig: ST_KinAxes;
	in_stKinToPlc AT %I*  : NCTOPLC_NCICHANNEL_REF;
	
	Xaxis: AXIS_REF;
	Yaxis: AXIS_REF;
	Zaxis: AXIS_REF;
	Extruder: AXIS_REF;
	XY_1: AXIS_REF;
	XY_2: AXIS_REF;

	setXY1:MC_SetPosition;
	setXY2:MC_SetPosition;
	setExtruder:MC_SetPosition;
	
	Zhome: MC_Home;
	
	Xjog: MC_Jog;
	Yjog: MC_Jog;
	moveExtruderAbsolute: MC_MoveAbsolute;
	
	ExecuteKinConfig: BOOL := true;
	HomingSensorX AT %I*: BOOL;
	HomingSensorY AT %I*: BOOL;
	HomingSensorZ AT %I*: BOOL;
	
	
	in_stNciToPlc AT %I*: NCTOPLC_NCICHANNEL_REF;
	out_stPlcToNci AT %Q*: PLCTONC_NCICHANNEL_REF;
	
	Xoffset: LREAL := 0;
	Yoffset: LREAL := 0;
	Zoffset: LREAL := 0.4;
	

	hotendResitance AT %I*  : INT := 1;
	hotbedResitance AT %I*  : INT := 1;
	hotendHeater AT %Q*  : BOOL;
	hotbedHeater AT %Q*  : BOOL;
	hotendFan1 AT %Q*  : BOOL;
	hotendFan2 AT %Q*  : BOOL;
	
	// Verschillende temperturen met hun weerstanden voor de steinhart equation
	// temperaturen die dichter bij de use case zitten vebeter de precisie van de gemeten temperatuur
	hotEndCalibrationValues  : ARRAY [1..6] OF LREAL := [200 ,552.99 ,210 ,456.11, 220, 378.95];
	hotBedCalibrationValues : ARRAY [1..6] OF LREAL := [50 ,35262 ,60 ,24136 ,70 ,16841 ]; 
	
	hParam: DINT;
	State: INT ;
	bConfirmHsk: BOOL := FALSE;
	sPrgNameSegment1: STRING(255) := 'test_3_segment_1.nc';
	sPrgNameSegment2: STRING(255) := 'test_3_segment_2.nc';
	nInterpreterState: UDINT;
	
	bEnable: BOOL := FALSE;
	homeAxi: BOOL := FALSE;
	loadGcode: BOOL := FALSE;
	executeGcode: BOOL := FALSE;
	stopGcode: BOOL := FALSE;
	executeExtruderMovement :BOOL := TRUE;
	resetExtruder : BOOL :=FALSE;
	intreperterState : UDINT;
	

	END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
fbPower(
	bEnable:=bEnable, 
	fOvr:= 100.0, 
	stX:=Xaxis, 
	stY:=Yaxis, 
	stZ:=Zaxis,
	stXY_1:= XY_1,
	stXY_2:= XY_2,
	stExt:= Extruder,
	stPlcToNci:=out_stPlcToNci , 
	bAllAxesReady=> );

fbGetHotEndTemperature(terminalResistance := (10*INT_TO_REAL(hotendResitance)), calibrationValues := hotEndCalibrationValues );//hotendResitance
fbHotEndHeatingControl(actualTemp := fbGetHotEndTemperature.temperatureSensor,desiredTemp := 210);
hotendHeater := FALSE; // fbHotEndHeatingControl.PWM_out; 

fbGetHotBedTemperature(terminalResistance := (10*INT_TO_REAL(hotbedResitance)), calibrationValues := hotBedCalibrationValues );//hotbed temperatuur
fbHotBedHeatingControl(actualTemp := fbGetHotBedTemperature.temperatureSensor,desiredTemp := 60); // pd controlller die een pwm signaal output
hotbedHeater := fbHotBedHeatingControl.PWM_out;
	
CASE State OF
	0: // init
	
	
	hotendFan1 := TRUE;
	hotendFan2 := TRUE;
	
	ExecuteKinConfig:=TRUE;
	IF fbPower.bAllAxesReady THEN
		State := 10; 
	END_IF
	
	10:
	
	stAxesConfig.nAxisIdsAcs[1] := XY_2.NcToPlc.AxisId;
	stAxesConfig.nAxisIdsAcs[2] := XY_1.NcToPlc.AxisId;
	stAxesConfig.nAxisIdsMcs[1] := Xaxis.NcToPlc.AxisId;
	stAxesConfig.nAxisIdsMcs[2] := Yaxis.NcToPlc.AxisId;
	
	fbConfigKinGroup( // voeg de xy core motoren toe tot de kinematische groep
    bExecute       := ExecuteKinConfig ,
    bCartesianMode := TRUE ,
    stAxesList     := stAxesConfig,
    stKinRefIn     := in_stKinToPlc );
	
	IF NOT fbConfigKinGroup.bBusy THEN
		IF NOT fbConfigKinGroup.bError THEN
			ExecuteKinConfig:=FALSE;
			fbConfigKinGroup(
			bExecute       := ExecuteKinConfig ,
			stAxesList     := stAxesConfig,
			stKinRefIn     := in_stKinToPlc );
			IF homeAxi THEN
				State:=30;
			END_IF
		END_IF
	END_IF
	
	20: // jog de x axis tot de eind switch wordt geraakt
	Xjog(Axis:= Xaxis,JogBackwards:= TRUE , Deceleration:= 1500);
	
	IF NOT HomingSensorX THEN
		Xjog(Axis:= Xaxis,JogBackwards:= FALSE,);
		State:=21;
	END_IF
	
	21: // jog de y axis tot de eind switch wordt geraakt
	Yjog(Axis:= Yaxis,JogBackwards:= TRUE , Deceleration:= 1500);
	IF NOT HomingSensorY THEN
		Yjog(Axis:= Yaxis,JogBackwards:= FALSE);	
		State:=22;
	END_IF
	
	22: // Zet cartesian mode uit zodat de positie van de xy motoren op 0 geet kan worden om te homen
	ExecuteKinConfig:=TRUE;
	fbConfigKinGroup( 
    bExecute       := ExecuteKinConfig,
    bCartesianMode := FALSE ,
    stAxesList     := stAxesConfig,
    stKinRefIn     := in_stKinToPlc );
	
	
	IF NOT fbConfigKinGroup.bBusy THEN
		SetXY1(execute:= TRUE ,axis:= XY_1 ,position:= Xoffset);
		SetXY2(execute:= TRUE ,axis:= XY_2 ,position:= Yoffset);
		IF NOT fbConfigKinGroup.bError THEN
			ExecuteKinConfig:=FALSE;
			fbConfigKinGroup(
			bExecute       := ExecuteKinConfig ,
			stAxesList     := stAxesConfig,
			stKinRefIn     := in_stKinToPlc );
			State:=23;
		END_IF
	END_IF
	
	23: // home de z axis
	Zhome(axis := Zaxis,execute := TRUE,BCalibrationCam := NOT HomingSensorZ,Position := Zoffset);
	IF Zhome.Done THEN
		ExecuteKinConfig:=TRUE;
		State:=24;
	END_IF
	
	24:
	
	fbConfigKinGroup( // zet de kinematische groep weer op cartesian mode om hem weer te kunnnen bewegen.
    bExecute       := ExecuteKinConfig,
    bCartesianMode := TRUE ,
    stAxesList     := stAxesConfig,
    stKinRefIn     := in_stKinToPlc );
	
	IF NOT fbConfigKinGroup.bBusy THEN
		IF NOT fbConfigKinGroup.bError THEN
			State:= 25;
		END_IF
	END_IF
	25:
	setExtruder(execute:= TRUE ,axis:= Extruder ,position:= 0);
	IF setExtruder.Done THEN
		state:= 30;
	END_IF
	
	30: // het configureren van de NCI met de x,y en z as
	fbBuildGroup(
		bExecute:=TRUE,
		nGroupId:=ItpGetGroupId(sNciToPlc:=in_stNciToPlc),
		nXAxisId:=XAxis.NcToPlc.AxisId,
		nYAxisId:=YAxis.NcToPlc.AxisId,
		nZAxisId:=ZAxis.NcToPlc.AxisId,
		nQ1AxisId:= Extruder.NcToPlc.AxisId,
		tTimeOut:=T#2S );
		
	IF NOT fbBuildGroup.bBusy THEN
		fbBuildGroup( bExecute:=FALSE );
		
		IF NOT fbBuildGroup.bErr THEN
				State	:= 40;
		END_IF
	END_IF
	
	40: // laad segment 1
	fbExecuteGcode(execute:= TRUE ,sPrgName:= sPrgNameSegment1 ,in_stNciToPlc:= in_stNciToPlc, reset:= FALSE);
	
	IF fbExecuteGcode.done THEN
		fbExecuteGcode(execute:= FALSE, reset:= TRUE);
		state:= 41;
	END_IF
	
	41: //tijdens segment 1
	fbStartGCode( bStart:= FALSE, sNciToPlc:= in_stNciToPlc);
	nInterpreterState	:= ItpGetStateInterpreter(sNciToPlc:=in_stNciToPlc); // status van de NCI
	IF nInterpreterState = Tc2_NCI.NCI_INTERPRETER_READY THEN // als de G-code klaar is gaat het programma naar de volgende state
		State:=42;
	END_IF

	42: // set position extruder axis
	setExtruder(execute:= TRUE ,axis:= Extruder ,position:= 0);
	IF setExtruder.Done THEN
		state:= 50;
	END_IF

	50: //voer g-code uit
	fbExecuteGcode(execute:= TRUE, sPrgName:= sPrgNameSegment2,in_stNciToPlc:= in_stNciToPlc, reset:= FALSE);
	
	IF fbExecuteGcode.done THEN
		fbExecuteGcode(execute:= FALSE, reset:= TRUE);
		state:= 51;
	END_IF
	
	51: // tijdens het printen
	nInterpreterState	:= ItpGetStateInterpreter(sNciToPlc:=in_stNciToPlc); // status of the NCI channel
	IF nInterpreterState = Tc2_NCI.NCI_INTERPRETER_READY THEN // if g-code is finished then
		State:=60;
	END_IF
			
		
	60: // print is klaar
	
	
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="6" Count="6" />
      <LineId Id="155" Count="1" />
      <LineId Id="808" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="2513" Count="0" />
      <LineId Id="2512" Count="0" />
      <LineId Id="2515" Count="0" />
      <LineId Id="2514" Count="0" />
      <LineId Id="2703" Count="1" />
      <LineId Id="2702" Count="0" />
      <LineId Id="2701" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="2261" Count="0" />
      <LineId Id="2348" Count="0" />
      <LineId Id="2344" Count="0" />
      <LineId Id="2430" Count="0" />
      <LineId Id="2347" Count="0" />
      <LineId Id="20" Count="10" />
      <LineId Id="162" Count="0" />
      <LineId Id="31" Count="4" />
      <LineId Id="164" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="501" Count="1" />
      <LineId Id="504" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="865" Count="2" />
      <LineId Id="161" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="231" Count="3" />
      <LineId Id="292" Count="3" />
      <LineId Id="239" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="352" Count="4" />
      <LineId Id="445" Count="0" />
      <LineId Id="435" Count="1" />
      <LineId Id="440" Count="1" />
      <LineId Id="437" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="638" Count="2" />
      <LineId Id="637" Count="0" />
      <LineId Id="360" Count="1" />
      <LineId Id="351" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="2039" Count="3" />
      <LineId Id="52" Count="1" />
      <LineId Id="623" Count="11" />
      <LineId Id="622" Count="0" />
      <LineId Id="2615" Count="0" />
      <LineId Id="2618" Count="2" />
      <LineId Id="2617" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="704" Count="5" />
      <LineId Id="1452" Count="0" />
      <LineId Id="710" Count="7" />
      <LineId Id="870" Count="0" />
      <LineId Id="872" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="2605" Count="2" />
      <LineId Id="2609" Count="0" />
      <LineId Id="2608" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="2184" Count="0" />
      <LineId Id="1897" Count="0" />
      <LineId Id="1902" Count="0" />
      <LineId Id="1904" Count="1" />
      <LineId Id="1939" Count="1" />
      <LineId Id="1942" Count="3" />
      <LineId Id="1938" Count="0" />
      <LineId Id="1894" Count="0" />
      <LineId Id="2610" Count="4" />
      <LineId Id="1946" Count="0" />
      <LineId Id="1936" Count="0" />
      <LineId Id="1949" Count="0" />
      <LineId Id="1966" Count="2" />
      <LineId Id="1965" Count="0" />
      <LineId Id="1951" Count="0" />
      <LineId Id="1661" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="1585" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="1451" Count="0" />
      <LineId Id="1252" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>