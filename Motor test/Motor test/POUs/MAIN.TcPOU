<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{3ce5e4ac-bfb0-49c4-b2f9-09c5e5f1024f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	
	fbPower: FB_PowerChannel;
	
	//fbfanControl: Fan_control;
	fbHotEndHeatingControl: Heater_control;
	fbGetHotEndTemperature : FB_GetTemperature;
	fbHotBedHeatingControl: Heater_control;
	fbGetHotBedTemperature : FB_GetTemperature;
	
	fbConfirmHsk: ItpConfirmHsk;
	fbExecuteGcode: FB_ExecuteGcode;
	fbBuildGroup: CfgBuildExt3DGroup;
	fbReconfigAxis: CfgReconfigAxis;
	fbAddAxis: CfgAddAxisToGroup;
	fbLoadGCode: ItpLoadProgEx;
	fbStartGCode: ItpStartStopEx;
	fbConfigKinGroup: FB_KinConfigGroup;
    stAxesConfig: ST_KinAxes;
	in_stKinToPlc AT %I*  : NCTOPLC_NCICHANNEL_REF;
	
	Xaxis: AXIS_REF;
	Yaxis: AXIS_REF;
	Zaxis: AXIS_REF;
	Extruder: AXIS_REF;
	XY_1: AXIS_REF;
	XY_2: AXIS_REF;

	setXY1:MC_SetPosition;
	setXY2:MC_SetPosition;
	setExtruder:MC_SetPosition;
	
	Zhome: MC_Home;
	
	Xjog: MC_Jog;
	Yjog: MC_Jog;
	moveExtruderAbsolute1: MC_MoveAbsolute;
	moveExtruderAbsolute2: MC_MoveAbsolute;
	moveZAbsolute: MC_MoveAbsolute;
	
	ExecuteKinConfig: BOOL := true;
	HomingSensorX AT %I*: BOOL;
	HomingSensorY AT %I*: BOOL;
	HomingSensorZ AT %I*: BOOL;
	
	
	in_stNciToPlc AT %I*: NCTOPLC_NCICHANNEL_REF;
	out_stPlcToNci AT %Q*: PLCTONC_NCICHANNEL_REF;
	
	Xoffset: LREAL := 0;
	Yoffset: LREAL := 0;
	Zoffset: LREAL := 0.4;
	

	hotendResitance AT %I*  : INT := 1;
	hotbedResitance AT %I*  : INT := 1;
	hotendHeater AT %Q*  : BOOL;
	hotbedHeater AT %Q*  : BOOL;
	hotendFan1 AT %Q*  : BOOL;
	hotendFan2 AT %Q*  : BOOL;
	
	// Verschillende temperturen met hun weerstanden voor de steinhart equation
	// temperaturen die dichter bij de use case zitten vebeter de precisie van de gemeten temperatuur
	hotEndCalibrationValues  : ARRAY [1..6] OF LREAL := [200 ,552.99 ,210 ,456.11, 220, 378.95];
	hotBedCalibrationValues : ARRAY [1..6] OF LREAL := [50 ,35262 ,60 ,24136 ,70 ,16841 ]; 
	
	hParam: DINT;
	ExtruderValue: LREAL;
	test: LREAL;
	test1: BOOL;
	test2: INT;
	
	State: INT ;
	printerSpeed : LREAL;
	ExtruderSpeed : LREAL;
	bConfirmHsk: BOOL := FALSE;
	sPrgNameSegment: STRING(255) := 'calibrationCube.nc';
	nInterpreterState: UDINT;
	
	bEnable: BOOL := FALSE;
	homeAxi: BOOL := FALSE;
	loadGcode: BOOL := FALSE;
	executeGcode: BOOL := FALSE;
	moveAbs1: BOOL := FALSE;
	moveAbs2: BOOL := FALSE;
	executeExtruderMovement :BOOL := TRUE;
	resetExtruder : BOOL :=FALSE;
	intreperterState : UDINT;
	

	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbPower(
	bEnable:=bEnable, 
	fOvr:= 100.0, 
	stX:=Xaxis, 
	stY:=Yaxis, 
	stZ:=Zaxis,
	stXY_1:= XY_1,
	stXY_2:= XY_2,
	stExt:= Extruder,
	stPlcToNci:=out_stPlcToNci , 
	bAllAxesReady=> );
	
moveExtruderAbsolute1(Axis := Extruder, execute := moveAbs1 , Position := extruderValue ,Velocity := extruderSpeed ,buffermode := MC_Aborting );
moveExtruderAbsolute2(Axis := Extruder, execute := moveAbs2 , Position := extruderValue ,Velocity := extruderSpeed ,buffermode := MC_Aborting );		
	

fbGetHotEndTemperature(terminalResistance := (10*INT_TO_REAL(hotendResitance)), calibrationValues := hotEndCalibrationValues );//hotendResitance
fbHotEndHeatingControl(actualTemp := fbGetHotEndTemperature.temperatureSensor,desiredTemp := 215); // pd controller die een pwm signaal output for de hot end 
hotendHeater := fbHotEndHeatingControl.PWM_out; 

fbGetHotBedTemperature(terminalResistance := (10*INT_TO_REAL(hotbedResitance)), calibrationValues := hotBedCalibrationValues );//hotbed temperatuur
fbHotBedHeatingControl(actualTemp := fbGetHotBedTemperature.temperatureSensor,desiredTemp := 60); // pd controlller die een pwm signaal output
//hotbedHeater := fbHotBedHeatingControl.PWM_out;
	
CASE State OF
	0: // init
	
	
	hotendFan1 := TRUE;
	hotendFan2 := TRUE;
	moveAbs1 := FALSE;
	moveAbs2 := FALSE;
	
	ExecuteKinConfig:=TRUE;
	IF fbPower.bAllAxesReady THEN
		State := 10; 
	END_IF
	
	
	
	10:
	
	stAxesConfig.nAxisIdsAcs[1] := XY_2.NcToPlc.AxisId;
	stAxesConfig.nAxisIdsAcs[2] := XY_1.NcToPlc.AxisId;
	stAxesConfig.nAxisIdsMcs[1] := Xaxis.NcToPlc.AxisId;
	stAxesConfig.nAxisIdsMcs[2] := Yaxis.NcToPlc.AxisId;
	
	fbConfigKinGroup( // voeg de xy core motoren toe tot de kinematische groep
    bExecute       := ExecuteKinConfig ,
    bCartesianMode := TRUE ,
    stAxesList     := stAxesConfig,
    stKinRefIn     := in_stKinToPlc );
	
	IF NOT fbConfigKinGroup.bBusy THEN
		IF NOT fbConfigKinGroup.bError THEN
			ExecuteKinConfig:=FALSE;
			fbConfigKinGroup(
			bExecute       := ExecuteKinConfig ,
			stAxesList     := stAxesConfig,
			stKinRefIn     := in_stKinToPlc );
			IF homeAxi THEN
				State:=20;
			END_IF
		END_IF
	END_IF
	
	
	
	20: // jog de x axis tot de eind switch wordt geraakt
	Xjog(Axis:= Xaxis,JogBackwards:= TRUE , Deceleration:= 1500);
	
	IF NOT HomingSensorX THEN
		Xjog(Axis:= Xaxis,JogBackwards:= FALSE,);
		State:=21;
	END_IF
	
	
	
	21: // jog de y axis tot de eind switch wordt geraakt
	Yjog(Axis:= Yaxis,JogBackwards:= TRUE , Deceleration:= 1500);
	IF NOT HomingSensorY THEN
		Yjog(Axis:= Yaxis,JogBackwards:= FALSE);	
		State:=22;
	END_IF
	
	
	
	22: // Zet cartesian mode uit zodat de positie van de xy motoren op 0 geet kan worden om te homen
	ExecuteKinConfig:=TRUE;
	fbConfigKinGroup( 
    bExecute       := ExecuteKinConfig,
    bCartesianMode := FALSE ,
    stAxesList     := stAxesConfig,
    stKinRefIn     := in_stKinToPlc );
	
	
	IF NOT fbConfigKinGroup.bBusy THEN
		SetXY1(execute:= TRUE ,axis:= XY_1 ,position:= Xoffset);
		SetXY2(execute:= TRUE ,axis:= XY_2 ,position:= Yoffset);
		IF NOT fbConfigKinGroup.bError THEN
			ExecuteKinConfig:=FALSE;
			fbConfigKinGroup(
			bExecute       := ExecuteKinConfig ,
			stAxesList     := stAxesConfig,
			stKinRefIn     := in_stKinToPlc );
			State:=23;
		END_IF
	END_IF
	
	
	
	23: // home de z axis
	Zhome(axis := Zaxis,execute := TRUE,BCalibrationCam := NOT HomingSensorZ,Position := Zoffset);
	IF Zhome.Done THEN
		ExecuteKinConfig:=TRUE;
		State:=24;
	END_IF
	
	
	
	24:
	
	fbConfigKinGroup( // zet de kinematische groep weer op cartesian mode om hem weer te kunnnen bewegen.
    bExecute       := ExecuteKinConfig,
    bCartesianMode := TRUE ,
    stAxesList     := stAxesConfig,
    stKinRefIn     := in_stKinToPlc );
	
	IF NOT fbConfigKinGroup.bBusy THEN
		IF NOT fbConfigKinGroup.bError THEN
			State:= 25;
		END_IF
	END_IF
	
	
	25:
	moveZAbsolute(axis:= Zaxis, Execute:= TRUE, Position:= 2, velocity:=1);
	IF moveZAbsolute.Done THEN
		moveZAbsolute(axis:= Zaxis, Execute:= FALSE);
		state:= 26;
	END_IF
	
	
	26:
	setExtruder(execute:= TRUE ,axis:= Extruder ,position:= 0);
	IF setExtruder.Done AND fbGetHotEndTemperature.temperatureSensor >= 205 THEN
		state:= 30;
	END_IF
	
	
	
	30: // het configureren van de NCI met de x,y en z as
	fbBuildGroup(
		bExecute:=TRUE,
		nGroupId:=ItpGetGroupId(sNciToPlc:=in_stNciToPlc),
		nXAxisId:=XAxis.NcToPlc.AxisId,
		nYAxisId:=YAxis.NcToPlc.AxisId,
		nZAxisId:=ZAxis.NcToPlc.AxisId,
		tTimeOut:=T#2S );
		
	IF NOT fbBuildGroup.bBusy THEN
		fbBuildGroup( bExecute:=FALSE );
		
		IF NOT fbBuildGroup.bErr THEN
				State	:= 40;
		END_IF
	END_IF
	
	
	
	40: // laad segment 1
	fbExecuteGcode(execute:= TRUE ,sPrgName:= sPrgNameSegment ,in_stNciToPlc:= in_stNciToPlc, reset:= FALSE);
	
	IF fbExecuteGcode.done THEN
		fbExecuteGcode(execute:= FALSE, reset:= TRUE);
		state:= 41;
	END_IF
	
	
	
	41: //tijdens g-code absoluut commando 1
	
	
	IF ItpIsHskMFunc( in_stNciToPlc ) AND ItpGetHskMFunc( in_stNciToPlc ) = 1 THEN // Bij m- function 1 gaan naar de set etruder position stte
		State:=43;
	ELSE 
		fbConfirmHsk(sNciToPlc := in_stNciToPlc,
						  sPlcToNci:= out_stPlcToNci,
						  bExecute:= FALSE);
	END_IF
	
	nInterpreterState	:= ItpGetStateInterpreter(sNciToPlc:=in_stNciToPlc); // status van de NCI
	IF nInterpreterState = Tc2_NCI.NCI_INTERPRETER_READY THEN // als de g-code is klaar
		State:=50;
	END_IF
	
	hParam := ItpGetHParam( in_stNciToPlc );
	extruderValue := (DINT_TO_LREAL (hParam)/100000);
	printerSpeed := ItpGetSetPathVelocity( in_stNciToPlc );
	
	IF extruderValue < 0 THEN
		extruderSpeed := 10;
	ELSE
		extruderSpeed := (printerSpeed * 0.08);
	END_IF
	
	IF extruderSpeed = 0  THEN
		extruderSpeed:= 0.1;
	END_IF
	
	IF ItpIsHskMFunc( in_stNciToPlc ) THEN // Bij m- function 1 gaan naar de set etruder position stte
		IF ItpGetHskMFunc( in_stNciToPlc ) = 1 THEN
			State:=43;
		END_IF
	ELSE 
		IF extruderValue <> 0 THEN
				moveAbs1 := TRUE;
				moveAbs2 := FALSE;
				state := 42;
			END_IF	
		fbConfirmHsk(sNciToPlc := in_stNciToPlc,
						  sPlcToNci:= out_stPlcToNci,
						  bExecute:= FALSE);
	END_IF
	

	
	42: //tijdens g-code absoluut commando 2
	
	
	nInterpreterState	:= ItpGetStateInterpreter(sNciToPlc:=in_stNciToPlc); // status van de NCI
	IF nInterpreterState = Tc2_NCI.NCI_INTERPRETER_READY THEN // als de g-code is klaar
		State:=50;
	END_IF
	
	hParam := ItpGetHParam( in_stNciToPlc );
	extruderValue := (DINT_TO_LREAL (hParam)/100000);
	printerSpeed := ItpGetSetPathVelocity( in_stNciToPlc );
	
	IF extruderValue < 0 THEN
		extruderSpeed := 10;
	ELSE
		extruderSpeed := (printerSpeed * 0.08);
	END_IF
	
	IF extruderSpeed = 0  THEN
		extruderSpeed:= 0.1;
	END_IF
	
	IF ItpIsHskMFunc( in_stNciToPlc ) THEN // Bij m- function 1 gaan naar de set etruder position stte
		IF ItpGetHskMFunc( in_stNciToPlc ) = 1 THEN
			State:=43;
		END_IF
	ELSE 
		IF extruderValue <> 0 THEN
				moveAbs1 := FALSE;
				moveAbs2 := TRUE;
				state := 41;
			END_IF	
		fbConfirmHsk(sNciToPlc := in_stNciToPlc,
						  sPlcToNci:= out_stPlcToNci,
						  bExecute:= FALSE);
	END_IF
	
	
	
	
	43: // set position extruder axis
	moveAbs1 := FALSE;
	moveAbs2 := FALSE;
	
	hParam := ItpGetHParam( in_stNciToPlc );
	extruderValue := (DINT_TO_LREAL (hParam)/100000);
	
	setExtruder(execute:= TRUE ,axis:= Extruder ,position:= 0);
	IF setExtruder.Done THEN
		fbConfirmHsk(sNciToPlc := in_stNciToPlc,
						  sPlcToNci:= out_stPlcToNci,
						  bExecute:= TRUE);
		setExtruder(execute:= FALSE ,axis:= Extruder);
		
		test:= test +1;
		
		state:= 41;
	END_IF

	50: // print is klaar
	
	60:// rotzooi
	
	
END_CASE
	
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="3220" Count="38" />
      <LineId Id="3481" Count="0" />
      <LineId Id="3259" Count="26" />
      <LineId Id="3480" Count="0" />
      <LineId Id="3286" Count="8" />
      <LineId Id="3479" Count="0" />
      <LineId Id="3295" Count="7" />
      <LineId Id="3478" Count="0" />
      <LineId Id="3303" Count="22" />
      <LineId Id="3477" Count="0" />
      <LineId Id="3326" Count="7" />
      <LineId Id="3476" Count="0" />
      <LineId Id="3334" Count="13" />
      <LineId Id="3624" Count="0" />
      <LineId Id="3348" Count="0" />
      <LineId Id="3623" Count="0" />
      <LineId Id="3627" Count="1" />
      <LineId Id="3630" Count="0" />
      <LineId Id="3629" Count="0" />
      <LineId Id="3475" Count="0" />
      <LineId Id="3625" Count="0" />
      <LineId Id="3349" Count="6" />
      <LineId Id="3474" Count="0" />
      <LineId Id="3356" Count="17" />
      <LineId Id="3473" Count="0" />
      <LineId Id="3374" Count="8" />
      <LineId Id="3471" Count="0" />
      <LineId Id="3383" Count="3" />
      <LineId Id="3490" Count="0" />
      <LineId Id="3388" Count="0" />
      <LineId Id="3463" Count="1" />
      <LineId Id="3391" Count="10" />
      <LineId Id="3641" Count="0" />
      <LineId Id="3637" Count="3" />
      <LineId Id="3402" Count="0" />
      <LineId Id="3646" Count="0" />
      <LineId Id="3403" Count="0" />
      <LineId Id="3643" Count="1" />
      <LineId Id="3647" Count="0" />
      <LineId Id="3518" Count="12" />
      <LineId Id="3409" Count="4" />
      <LineId Id="3421" Count="9" />
      <LineId Id="3642" Count="0" />
      <LineId Id="3631" Count="1" />
      <LineId Id="3634" Count="0" />
      <LineId Id="3636" Count="0" />
      <LineId Id="3633" Count="0" />
      <LineId Id="3431" Count="0" />
      <LineId Id="3648" Count="1" />
      <LineId Id="3512" Count="1" />
      <LineId Id="3503" Count="4" />
      <LineId Id="3514" Count="3" />
      <LineId Id="3508" Count="3" />
      <LineId Id="3432" Count="0" />
      <LineId Id="3437" Count="2" />
      <LineId Id="3472" Count="0" />
      <LineId Id="3440" Count="12" />
      <LineId Id="3496" Count="0" />
      <LineId Id="3467" Count="0" />
      <LineId Id="3497" Count="0" />
      <LineId Id="3453" Count="9" />
      <LineId Id="1252" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>